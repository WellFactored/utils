package com.wiredthing.utils.playSupport.filters

import com.wiredthing.utils.playSupport._
import play.api.mvc._

import scala.concurrent.Future

object RewritePlay1AuthenticityTokenFilter extends RewritePlay1AuthenticityToken

/**
 * This filter adapts the authenticity token handling from Play 1 to Play 2. In Play 1 the session property
 * that holds the token is named `___AT` and the form element is called `authenticityToken`. Both of these
 * are hard-coded into the source.
 *
 * Play 2 allows us to configure the name used for the token, but assumes it is the same for both the session
 * property and the form element.
 *
 * In order to be able to accept authenticity tokens generated by play 1 when handling form posts in play 2, configure
 * play 2 to use `authenticityToken` as the token name and use this filter to re-write the session property on the fly.
 * Make sure it is plumbed into the filter pipeline before the CSRFFilter
 */
class RewritePlay1AuthenticityToken extends Filter {
  def addSessionProperty(rh: RequestHeader, property: (String, String)): RequestHeader = {
    rh.withSessionProperty(property)
  }

  override def apply(next: (RequestHeader) => Future[Result])(rh: RequestHeader): Future[Result] = {
    rh.session.get("___AT") match {
      case None => next(rh)
      case Some(authenticityToken) => next(addSessionProperty(rh, "authenticityToken" -> authenticityToken))
    }
  }
}

